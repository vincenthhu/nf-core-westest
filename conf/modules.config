/*
========================================================================================
    Config file for defining DSL2 per module options and publishing paths
========================================================================================
    Available keys to override module options:
        ext.args            = Additional arguments appended to command in module.
        ext.args2           = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3           = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix          = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: 'copy',
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    //===========================================
    // Local subworkflows
    //===========================================
    // PREPARE_GENOME

    // PREPARE_BED
    withName: '.*:PREPARE_BED:TABIX_PT' {
        publishDir = [
            path: { "${params.outdir}/references/interval" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: '.*:PREPARE_BED:TABIX_PBT' {
        publishDir = [
            path: { "${params.outdir}/references/interval" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: '.*:PREPARE_BED:GATK4_BEDTOINTERVALLIST' {
        publishDir = [
            path: { "${params.outdir}/references/interval" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // INPUT_CHECK
    withName: '.*:INPUT_CHECK:SAMPLESHEET_CHECK' {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // BQSR
    withName: '.*:BQSR:GATK4_BASERECALIBRATOR' {
        ext.args = '--use-original-qualities'
        ext.prefix = { "${meta.id}.recal" }
    }
    withName: '.*:BQSR:GATK4_APPLYBQSR' {
        ext.prefix = { "${meta.id}.recal" }
        publishDir = [
            path: { "${params.outdir}/Preprocessing/recal" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: '.*:BQSR:SAMTOOLS_INDEX' {
        publishDir = [
            path: { "${params.outdir}/Preprocessing/recal" }
            mode: copy
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // GERMLINE_VC_GATK4
    withName: '.*:GERMLINE_VC_GATK4:GATK4_HAPLOTYPECALLER' {
        ext.args = '-ERC GVCF'
        ext.prefix = { "${meta.id}.g" }
        publishDir = [
            path: { "${params.outdir}/Germline_SNV/GATK4" }
            mode: copy
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: '.*:GERMLINE_VC_GATK4:GATK4_INDEXFEATUREFILE' {
        publishDir = [
            path: { "${params.outdir/Germline_SNV/GATK4}" }
            mode: copy
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: '.*:GERMLINE_VC_GATK4:GATK4_GENOMICSDBIMPORT' {
        ext.prefix = { "gendb" }
        publishDir = [
            path: { "${params.outdir/Germline_SNV/GATK4}" }
            mode: copy
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: '.*:GERMLINE_VC_GATK4:GATK4_GENOTYPEGVCFS' {
        publishDir = [
            path: { "${params.outdir/Germline_SNV/GATK4}" }
            mode: copy
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // PREPARE_PON
    withName: '.*:PREPARE_PON:GATK4_MUTECT2_PON' {
        ext.args = '--max-mnp-distance 0'
    }

    withName: '.*:PREPARE_PON:GATK4_GENOMICSDBIMPORT_PON' {
        publishDir = [
            path: { "${params.outdir/Somatic_SNV/GATK4}" }
            mode: copy
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*:PREPARE_PON:GATK4_CREATESOMATICPANELOFNORMALS_PON' {
        publishDir = [
            path: { "${params.outdir/Somatic_SNV/GATK4}" }
            mode: copy
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    }

    // SOMATIC_VC_GATK4
    withName: '.*:SOMATIC_VC_GATK4:GATK4_MUTECT2' {
        ext.prefix = { "${meta.id}.mutect2.unfiltered" }
        publishDir = [
            path: { "${params.outdir/Somatic_SNV/GATK4/Unfiltered}" }
            mode: copy
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*:SOMATIC_VC_GATK4:GATK4_LEARNREADORIENTATIONMODEL' {
        ext.prefix = { "${meta.id}.read-orientation-model" }
    }

    withName: '.*:SOMATIC_VC_GATK4:GATK4_FILTERMUTECTCALLS' {
        ext.prefix = { "${meta.id}.mutect2.filtered" }
        publishDir = [
            path: { "${params.outdir/Somatic_SNV/GATK4/Filtered}" }
            mode: copy
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*:SOMATIC_CNV_PREPROCESSING:GATK4_PREPROCESSINTERVALS' {
        ext.prefix = { "${meta.id}.preprocessed" }
        publishDir = [
            path: { "${params.outdir/REF}" }
            mode: copy
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*:SOMATIC_CNV_PREPROCESSING:GATK4_ANNOTATEINTERVALS' {
        ext.prefix = { "${meta.id}.annotated" }
        publishDir = [
            path: { "${params.outdir/REF}" }
            mode: copy
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*:SOMATIC_CNV_PREPROCESSING:GATK4_INTERVALLISTTOBED' {
        ext.prefix = { "${meta.id}.preprocessed" }
    }

    withName: '.*:SOMATIC_CNV_PREPROCESSING:GATK4_BEDTOINTERVALLIST' {
        ext.prefix = { "${meta.id}.common_sites" }
        publishDir = [
            path: { "${params.outdir/REF}" }
            mode: copy
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // SOMATIC CNV PON
    withName: '.*:SOMATIC_CNV_PON:GATK4_CREATEREADCOUNTPANELOFNORMALS' {
        ext.prefix = { "${meta.id}.pon }
        publishDir = [
            path: { "${params.outdir/Somatic_CNV}" }
            mode: copy
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // SOMATIC_CNV_CNVKIT
    withName: '.*:SOMATIC_CNV_CNVKIT:CNVKIT_BATCH' {
        publishDir = [
            path: { "${params.outdir/CNVKIT}" }
            mode: copy
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    //===========================================
    // NF-CORE subworkflows
    //===========================================
    // ALIGN_BWAMEM2
    withName: '.*:ALIGN_BWAMEM2:BWAMEM2_MEM' {
        ext.args = '-M -K 100000000'
        publishDir = [
            path: { "${params.outdir}/Preprocessing/bwamem2" },
            enabled: false
        ]
    }
    withName: '.*:ALIGN_BWAMEM2:SAMTOOLS_SORT' {
        ext.prefix = { "${meta.id}.sorted" }
        publishDir = [
            path: { "${params.outdir}/Preprocessing/bwamem2" },
            enabled: false
        ]
    }
    withName: '.*:ALIGN_BWAMEM2:SAMTOOLS_INDEX' {
        publishDir = [
            path: { "${params.outdir}/Preprocessing/bwamem2" },
            enabled: false
        ]
    }
    withName: '.*:ALIGN_BWAMEM2:SAMTOOLS_STATS' {
        ext.args = '-s --remove-overlaps'
        publishDir = [
            path: { "${params.outdir}/Preprocessing/samtools" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }
    withName: '.*:ALIGN_BWAMEM2:SAMTOOLS_MERGE' {
        publishDir = [
            path: { "${params.outdir}/Preprocessing/merged" }
        ]
    }
    withName: '.*:ALIGN_BWAMEM2:PICARD_MARKDUPLICATES' {
        ext.prefix = { "${meta.id}.sorted.md" }
        publishDir = [
            path: { "${params.outdir}/Preprocessing/markduplicates" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: '.*:ALIGN_BWAMEM2:SAMTOOLS_INDEX_MD' {
        publishDir = [
            path: { "${params.outdir}/Preprocessing/markduplicates" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // QC_BAM
    withName: '.*:QC_BAM:PICARD_COLLECTMULTIPLEMETRICS' {
        publishDir = [
            path: { "${params.outdir}/Reports/bamqc_collectmultiplemetrics" },
            mode: 'copy'
        ]
    }
    withName: '.*:QC_BAM:QUALIMAP_BAMQC' {
        publishDir = [
            path: { "${params.outdir}/Reports/bamqc_qualimap" },
            mode: 'copy'
        ]
    }
    withName: '.*:QC_BAM:TIDDIT_COV' {
        ext.args = '-z 500 -w -u'
        publishDir = [
            path: { "${params.outdir}/Reports/tiddit_coverage" },
            mode: 'copy'
        ]
    }
    withName: '.*:QC_BAM:UCSC_WIGTOBIGWIG' {
        ext.args = '-clip'
        publishDir = [
            path: { "${params.outdir}/Reports/tiddit_coverage" },
            mode: 'copy'
        ]
    }

    //===========================================
    // NF-CORE modules
    //===========================================
    withName: FASTQC {
        ext.args = '--quiet'
        publishDir = [
            path: { "${params.outdir}/Reports/fastqc/${meta.id}" }
        ]
    }

    withName: TRIMGALORE {
        ext.args   = [
            '--fastqc',
            params.trim_nextseq > 0 ? "--nextseq ${params.trim_nextseq}" : ''
        ].join(' ').trim()
        publishDir = [
            [
                path: { "${params.outdir}/Preprocessing/trimgalore/fastqc" },
                mode: 'copy',
                pattern: "*.{html,zip}"
            ],
            [
                path: { "${params.outdir}/Preprocessing/trimgalore" },
                mode: 'copy',
                pattern: "*.fq.gz",
                enabled: params.save_trimmed
            ],
            [
                path: { "${params.outdir}/Preprocessing/trimgalore" },
                mode: 'copy',
                pattern: "*.txt"
            ]
        ]

    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: 'copy',
            pattern: '*_versions.yml'
        ]
    }

}
